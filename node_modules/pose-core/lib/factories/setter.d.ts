import { Props, PoserState, PoseMap, GetTransitionProps, GetInstantTransition, StartAction, StopAction, ResolveTarget, TransformPose, AddTransitionDelay, ConvertTransitionDefinition } from '../types';
declare type SetterFactoryProps<V, A, C, P> = {
    state: PoserState<V, A, C, P>;
    poses: PoseMap<A>;
    getInstantTransition: GetInstantTransition<V, A>;
    startAction: StartAction<V, A, C>;
    stopAction: StopAction<C>;
    addActionDelay: AddTransitionDelay<A>;
    getTransitionProps: GetTransitionProps<V>;
    resolveTarget: ResolveTarget<V>;
    convertTransitionDefinition: ConvertTransitionDefinition<V, A>;
    transformPose?: TransformPose<V, A, C, P>;
    posePriority?: string[];
};
export declare const resolveProp: (target: any, props: Props) => any;
declare const createPoseSetter: <V, A, C, P>(setterProps: SetterFactoryProps<V, A, C, P>) => (next: string, nextProps?: Props, propagate?: boolean) => Promise<any[]>;
export default createPoseSetter;
